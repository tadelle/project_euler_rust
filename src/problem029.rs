//! Distinct powers
//!
//! Consider all integer combinations of ab
//! for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//!
//! 2^2=4, 2^3=8, 2^4=16, 2^5=32
//! 3^2=9, 3^3=27, 3^4=81, 3^5=243
//! 4^2=16, 4^3=64, 4^4=256, 4^5=1024
//! 5^2=25, 5^3=125, 5^4=625, 5^5=3125
//! If they are then placed in numerical order,
//! with any repeats removed, we get the following
//! sequence of 15 distinct terms:
//!
//! 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
//!
//! How many distinct terms are in the sequence
//! generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
use std::collections::HashMap;

use super::problems::Problem;

pub struct Problema;

impl Problem for Problema {
    fn new() -> Problema {
        Problema {}
    }

    fn get_title(&self) -> String {
        String::from("Distinct powers")
    }

    fn get_result(&self) -> i64 {
        get_distinct_powers() as i64
    }
}

fn get_distinct_powers() -> i32 {
    let mut map: HashMap<String, f64> = HashMap::new();

    for a in 2..101 {
        for b in 2..101 {
            let result = (a as f64).powf(b as f64);
            map.insert(result.to_string(), result);
        }
    }
    map.len() as i32
}

#[cfg(test)]
mod test029 {
    use super::*;

    #[test]
    fn test_get_result() {
        assert_eq!(Problema::new().get_result(), 9183)
    }

    #[test]
    fn test_get_title() {
        assert_eq!(Problema::new().get_title(), "Distinct powers")
    }
}
