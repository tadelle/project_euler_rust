//! Highly divisible triangular number
//!
//! The sequence of triangle numbers is generated by adding the natural numbers.
//! So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
//! The first ten terms would be:
//!
//! 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//!
//! Let us list the factors of the first seven triangle numbers:
//!
//!  1: 1
//!  3: 1,3
//!  6: 1,2,3,6
//! 10: 1,2,5,10
//! 15: 1,3,5,15
//! 21: 1,3,7,21
//! 28: 1,2,4,7,14,28
//! We can see that 28 is the first triangle number to have over five divisors.
//!
//! What is the value of the first triangle number to have over five hundred divisors?
use super::problems::Problem;

pub struct Problema;

impl Problem for Problema {
    fn new() -> Problema {
        Problema {}
    }

    fn get_title(&self) -> String {
        String::from("Highly divisible triangular number")
    }

    fn get_result(&self) -> i64 {
        get_highly_divisible_triangular_number() as i64
    }
}

fn get_highly_divisible_triangular_number() -> i32 {
    let mut result: i32 = 2;
    let mut divisors = 0;
    let mut triangle_number = 28;
    let mut counter = 8;

    while divisors <= 500 {
        triangle_number += counter;
        let number_of_divisors = get_number_of_divisors(triangle_number);
        if number_of_divisors > divisors {
            result = triangle_number;
            divisors = number_of_divisors;
        }
        counter += 1;
    }

    result
}

fn get_number_of_divisors(number: i32) -> i32 {
    let limit = (number as f64).sqrt() as i32;
    let mut counter = 2;

    if limit * limit == number {
        counter -= 1
    }

    for index in 2..(limit + 1) {
        if number % index == 0 {
            counter += 2;
        }
    }
    counter
}

#[cfg(test)]
mod test012 {
    use super::*;

    #[test]
    fn test_get_result() {
        assert_eq!(Problema::new().get_result(), 76576500)
    }

    #[test]
    fn test_get_title() {
        assert_eq!(
            Problema::new().get_title(),
            "Highly divisible triangular number"
        )
    }

    #[test]
    fn test_get_number_of_divisors() {
        assert_eq!(get_number_of_divisors(6), 4);
        assert_eq!(get_number_of_divisors(2), 2);
        assert_eq!(get_number_of_divisors(3), 2);
        assert_eq!(get_number_of_divisors(4), 3);
        assert_eq!(get_number_of_divisors(28), 6);
    }
}
