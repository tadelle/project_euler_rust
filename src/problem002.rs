//! Even Fibonacci numbers
//! 
//! Each new term in the Fibonacci sequence is 
//! generated by adding the previous two terms. 
//! By starting with 1 and 2, the first 10 terms will be:
//! 
//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//! 
//! By considering the terms in the Fibonacci sequence 
//! whose values do not exceed four million, 
//! find the sum of the even-valued terms.
use super::Problem;

pub struct Problema;

impl Problem for Problema{

    fn new() -> Problema { Problema { }}

    fn get_title(&self) -> String {
        String::from("Even Fibonacci numbers")
    }

    fn get_result(&self) -> i64 {
        get_even_fibonacci_numbers()
    }
}

fn get_even_fibonacci_numbers() -> i64 {
    let limit = 4_000_000;
    let mut sum = 0;

    let mut number1 = 1;
    let mut number2 = 1;

    loop {
        let new_number = number1 + number2;
        number1 = number2;
        number2 = new_number;
        if new_number % 2 == 0 {
            sum += new_number;
        }
        if number1 + number2 >= limit{
            break;
        }
    }
    sum
}

#[cfg(test)]
mod test002 {
    use super::*;
    
    #[test]
    fn test_get_result(){
        assert_eq!(Problema::new().get_result(), 4613732)
    }

    #[test]
    fn test_get_title(){
        assert_eq!(Problema::new().get_title(), "Even Fibonacci numbers")
    }
}