//! Triangular, pentagonal, and hexagonal
//!
//! Triangle, pentagonal, and hexagonal
//! numbers are generated by the following formulae:
//!
//! Triangle   Tn=n(n+1)/2   1, 3, 6, 10, 15, ...
//! Pentagonal Pn=n(3n−1)/2  1, 5, 12, 22, 35, ...
//! Hexagonal  Hn=n(2n−1)    1, 6, 15, 28, 45, ...
//! It can be verified that T285 = P165 = H143 = 40755.
//!
//! Find the next triangle number that is
//! also pentagonal and hexagonal.
use super::Problem;

crate::base_problem!(1533776805, "Triangular, pentagonal, and hexagonal");

fn get_result_problem() -> i64 {
    let mut triangle_index = 286;
    let mut pentagonal_index = 166;
    let mut hexagonal_index = 144;

    loop {
        let triangle_number = get_triangle_number(triangle_index);

        let mut pentagonal_number = get_pentagonal_number(pentagonal_index);

        while pentagonal_number < triangle_number {
            pentagonal_index += 1;
            pentagonal_number = get_pentagonal_number(pentagonal_index)
        }

        if pentagonal_number == triangle_number {
            let mut hexagonal_number = get_hexagonal_number(hexagonal_index);
            while hexagonal_number < triangle_number {
                hexagonal_index += 1;
                hexagonal_number = get_hexagonal_number(hexagonal_index);
            }
            if hexagonal_number == triangle_number {
                return triangle_number;
            }
        }
        triangle_index += 1;
    }
}

fn get_triangle_number(index: i64) -> i64 {
    index * (index + 1) / 2
}

fn get_pentagonal_number(index: i64) -> i64 {
    index * (3 * index - 1) / 2
}

fn get_hexagonal_number(index: i64) -> i64 {
    index * (2 * index - 1)
}
